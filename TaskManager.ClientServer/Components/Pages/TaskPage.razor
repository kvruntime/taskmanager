@page "/taskspage"
@inject IHttpClientFactory httpClientFactory

@if(httpClient is not null)
{
<TasksList  @rendermode="InteractiveWebAssembly" httpClient="httpClient" />
}



@code {

  HttpClient httpClient;
  List<TaskItemReadDto> tasks;
  string taskEndpoint = "/api/taskitems";
  string error;
  string newTask;


  protected override async Task OnInitializedAsync()
  {
    httpClient = httpClientFactory.CreateClient("backendApi");
    await FetchTask();

    await base.OnInitializedAsync();
  }




  async Task FetchTask()
  {
    try { tasks = await httpClient.GetFromJsonAsync<List<TaskItemReadDto>>($"{taskEndpoint}"); }
    catch (Exception) { error = "Error occurs"; };
  }

  async Task ToggleTaskStatus(TaskItemReadDto item)
  {
    var copyItem = item;
    copyItem.IsComplete = !item.IsComplete;
    var response = await httpClient.PutAsJsonAsync<TaskItemReadDto>($"{taskEndpoint}/{copyItem.Id}", copyItem);
    if (!response.IsSuccessStatusCode)
    {
      error = $"{response.ReasonPhrase} - {response.StatusCode.ToString()}";
      return;
    }
    item.IsComplete = copyItem.IsComplete;
  }

  async Task DeleteTask(TaskItemReadDto item)
  {
    var response = await httpClient.DeleteAsync($"{taskEndpoint}/{item.Id}");
    if (!response.IsSuccessStatusCode)
    {
      error = $"{response.ReasonPhrase} - {response.StatusCode.ToString()}";
      return;
    }
    tasks.Remove(item);
  }
  async Task AddTask()
  {
    Console.WriteLine("callled");
    if (String.IsNullOrWhiteSpace(newTask))
      return;
    var itemdto = new TaskItemCreateDto() { TaskName = newTask };
    try
    {
      var response = await httpClient.PostAsJsonAsync<TaskItemCreateDto>($"{taskEndpoint}", itemdto);
      if (!response.IsSuccessStatusCode)
      {
        error = response.ReasonPhrase;
        return;
      }
      newTask = string.Empty;
      await FetchTask();
    }
    catch (Exception) { }
  }
}